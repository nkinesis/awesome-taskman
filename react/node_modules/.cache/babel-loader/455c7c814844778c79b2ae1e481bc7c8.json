{"ast":null,"code":"import _classCallCheck from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/gabriel/Documents/Projetos/React/atm-react/src/components/TaskForm.js\";\nimport '../index.css';\nimport React from 'react';\nimport { getFields } from './model/mock.js';\nimport { Task } from './model/task.js';\nexport var TaskForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskForm, _React$Component);\n\n  function TaskForm(props) {\n    var _this;\n\n    _classCallCheck(this, TaskForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskForm).call(this, props));\n    _this.state = {\n      compName: \"Form\",\n      objForm: new Task(),\n      clear: false\n    };\n    _this.clearForm = _this.clearForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.submitForm = _this.submitForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.formChange = _this.formChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TaskForm, [{\n    key: \"formChange\",\n    value: function formChange(e) {\n      var updObj = this.state.objForm;\n\n      if (e.target.id === \"desc\") {\n        updObj.description = e.target.value;\n      } else if (e.target.id === \"prio\") {\n        updObj.priority = e.target.value;\n      } else if (e.target.id === \"date\") {\n        updObj.date = e.target.value;\n      }\n\n      this.setState({\n        objForm: updObj\n      });\n    }\n  }, {\n    key: \"submitForm\",\n    value: function submitForm() {\n      var ctx = this;\n      this.clearForm();\n      ctx.props.submitForm(ctx.state.objForm);\n    }\n  }, {\n    key: \"clearForm\",\n    value: function clearForm() {\n      this.setState({\n        clear: true\n      });\n      this.props.clearForm();\n    }\n  }, {\n    key: \"createFields\",\n    value: function createFields() {\n      var _this2 = this;\n\n      var fieldList = getFields();\n      return fieldList.map(function (fields) {\n        var fieldGroup = React.createElement(\"div\", {\n          key: fields.name,\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, fields.name), React.createElement(\"input\", {\n          id: fields.name,\n          className: \"form-control\",\n          type: fields.type,\n          onBlur: function onBlur(fn) {\n            return _this2.blurField(fn);\n          },\n          defaultValue: _this2.state.objForm[fields.propName],\n          placeholder: fields.placeholder,\n          max: fields.max,\n          min: fields.min,\n          maxLength: fields.maxlength,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }));\n        return fieldGroup;\n      });\n    }\n  }, {\n    key: \"setSelectedTask\",\n    value: function setSelectedTask() {\n      var updObj;\n      var selectedTask = this.props.objSelected;\n\n      if (this.state.clear) {\n        updObj = new Task(\"\", 1);\n        this.setState({\n          clear: false,\n          objForm: updObj\n        });\n      } else {\n        if (selectedTask && selectedTask.id_task > 0 && selectedTask.id_task !== this.state.objForm.id_task) {\n          updObj = new Task(selectedTask.description, selectedTask.priority, selectedTask.id_user, selectedTask.date, selectedTask.id_task, selectedTask.status);\n          this.setState({\n            selectedObj: selectedTask,\n            objForm: updObj\n          });\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      this.setSelectedTask();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Description\"), React.createElement(\"input\", {\n        id: \"desc\",\n        className: \"form-control\",\n        type: \"text\",\n        onChange: function onChange(e) {\n          return _this3.formChange(e);\n        },\n        value: this.state.objForm.description,\n        placeholder: \"Your task...\",\n        maxLength: \"140\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Priority\"), React.createElement(\"input\", {\n        id: \"prio\",\n        className: \"form-control\",\n        type: \"number\",\n        onChange: function onChange(e) {\n          return _this3.formChange(e);\n        },\n        value: this.state.objForm.priority,\n        max: \"9\",\n        min: \"1\",\n        placeholder: \"Priority from 1 to 9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Due Date\"), React.createElement(\"input\", {\n        id: \"date\",\n        className: \"form-control\",\n        type: \"date\",\n        onChange: function onChange(e) {\n          return _this3.formChange(e);\n        },\n        value: this.state.objForm.date,\n        max: \"2099-12-31\",\n        min: \"2001-01-01\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.submitForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.clearForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Clear\"));\n    }\n  }]);\n\n  return TaskForm;\n}(React.Component);\nexport default TaskForm;","map":{"version":3,"sources":["/home/gabriel/Documents/Projetos/React/atm-react/src/components/TaskForm.js"],"names":["React","getFields","Task","TaskForm","props","state","compName","objForm","clear","clearForm","bind","submitForm","formChange","e","updObj","target","id","description","value","priority","date","setState","ctx","fieldList","map","fields","fieldGroup","name","type","fn","blurField","propName","placeholder","max","min","maxlength","selectedTask","objSelected","id_task","id_user","status","selectedObj","setSelectedTask","Component"],"mappings":"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","sourcesContent":["import '../index.css';\nimport React from 'react';\nimport { getFields } from './model/mock.js';\nimport { Task } from './model/task.js';\n\nexport class TaskForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            compName: \"Form\",\n            objForm: new Task(),\n            clear: false\n        }\n        this.clearForm = this.clearForm.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.formChange = this.formChange.bind(this);\n    }\n\n    formChange(e) {\n        var updObj = this.state.objForm;\n        if (e.target.id === \"desc\") {\n            updObj.description = e.target.value;\n        } else if (e.target.id === \"prio\") {\n            updObj.priority = e.target.value;\n        } else if (e.target.id === \"date\") {\n            updObj.date = e.target.value;\n        }\n        this.setState({\n            objForm: updObj\n        });\n    }\n\n    submitForm() {\n        var ctx = this;\n        this.clearForm();\n        ctx.props.submitForm(ctx.state.objForm);\n    }\n\n    clearForm() {\n        this.setState({\n            clear: true\n        });\n        this.props.clearForm();\n    }\n\n    createFields() {\n        var fieldList = getFields();\n        return fieldList.map((fields) => {\n            var fieldGroup = <div key={fields.name} className=\"form-group\">\n                <label>{fields.name}</label>\n                <input id={fields.name} className=\"form-control\"\n                type={fields.type}\n                onBlur={fn => this.blurField(fn)}\n                defaultValue={this.state.objForm[fields.propName]}\n                placeholder={fields.placeholder}\n                max={fields.max} min={fields.min} maxLength={fields.maxlength}></input>\n            </div>;\n            return (fieldGroup);\n        });\n    }\n\n    setSelectedTask() {\n        var updObj;\n        var selectedTask = this.props.objSelected;\n\n        if (this.state.clear) {\n            updObj = new Task(\"\", 1);\n            this.setState({\n                clear: false,\n                objForm: updObj\n            });\n        } else {\n            if (selectedTask && selectedTask.id_task > 0\n                && selectedTask.id_task !== this.state.objForm.id_task) {\n                updObj = new Task(selectedTask.description,\n                    selectedTask.priority,\n                    selectedTask.id_user,\n                    selectedTask.date,\n                    selectedTask.id_task,\n                    selectedTask.status);\n                this.setState({\n                    selectedObj: selectedTask,\n                    objForm: updObj,\n                }, );\n            }\n        }\n    }\n\n    render() {\n        this.setSelectedTask();\n        return (<div>\n            <div className=\"form-group\">\n                <label>Description</label>\n                <input id=\"desc\" className=\"form-control\"\n                    type=\"text\" onChange={e => this.formChange(e)}\n                    value={this.state.objForm.description}\n                    placeholder=\"Your task...\" maxLength=\"140\"\n                ></input>\n\n                <label>Priority</label>\n                <input id=\"prio\" className=\"form-control\"\n                    type=\"number\" onChange={e => this.formChange(e)}\n                    value={this.state.objForm.priority}\n                    max=\"9\" min=\"1\" placeholder=\"Priority from 1 to 9\"\n                ></input>\n\n                <label>Due Date</label>\n                <input id=\"date\" className=\"form-control\"\n                    type=\"date\" onChange={e => this.formChange(e)}\n                    value={this.state.objForm.date}\n                    max=\"2099-12-31\" min=\"2001-01-01\"\n                ></input>\n            </div>\n            <button className=\"btn btn-primary\" onClick={this.submitForm}>Submit</button>\n            <button className=\"btn btn-primary\" onClick={this.clearForm}>Clear</button>\n        </div>);\n    }\n}\n\nexport default TaskForm;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/gabriel/Documents/Projetos/React/atm-react/src/TaskForm.js\";\nimport './index.css';\nimport React from 'react';\nimport { getFields } from './model/mock.js';\nimport { Task } from './model/task.js';\nimport { Utils } from './model/utils.js';\nexport var TaskForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskForm, _React$Component);\n\n  function TaskForm(props) {\n    var _this;\n\n    _classCallCheck(this, TaskForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskForm).call(this, props));\n    _this.state = {\n      compName: \"Form\",\n      objForm: new Task(),\n      clear: false\n    };\n    _this.clearForm = _this.clearForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.submitForm = _this.submitForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.blurField = _this.blurField.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TaskForm, [{\n    key: \"blurField\",\n    value: function blurField(e) {\n      var updObj = this.state.objForm;\n\n      if (e.target.id === \"Description\") {\n        updObj.description = e.target.value;\n      } else if (e.target.id === \"Priority\") {\n        updObj.priority = e.target.value;\n      } else if (e.target.id === \"Due Date\") {\n        updObj.date = e.target.value;\n      }\n\n      this.setState({\n        objForm: updObj\n      });\n    }\n  }, {\n    key: \"changeField\",\n    value: function changeField(fn) {\n      console.log(\"change field\");\n    }\n  }, {\n    key: \"submitForm\",\n    value: function submitForm() {\n      console.log(\"called here\");\n      this.props.submitForm();\n    }\n  }, {\n    key: \"clearForm\",\n    value: function clearForm() {\n      this.setState({\n        clear: true\n      });\n      this.props.clearForm();\n    }\n  }, {\n    key: \"createFields\",\n    value: function createFields() {\n      var _this2 = this;\n\n      var fieldList = getFields();\n      return fieldList.map(function (fields) {\n        var input = React.createElement(\"input\", {\n          id: fields.name,\n          className: \"form-control\",\n          type: fields.type,\n          onBlur: function onBlur(fn) {\n            return _this2.blurField(fn);\n          },\n          defaultValue: _this2.state.objForm[fields.propName],\n          placeholder: fields.placeholder,\n          max: fields.max,\n          min: fields.min,\n          maxLength: fields.maxlength,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        });\n        var fieldGroup = React.createElement(\"div\", {\n          key: fields.name,\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, fields.name), input);\n        return fieldGroup;\n      });\n    }\n  }, {\n    key: \"setSelectedTask\",\n    value: function setSelectedTask() {\n      var updObj;\n      var selectedTask = this.props.objSelected;\n\n      if (selectedTask && selectedTask.id_task > 0 && selectedTask.id_task !== this.state.objForm.id_task) {\n        console.log(\"update values\");\n        updObj = new Task(selectedTask.description, selectedTask.priority, selectedTask.id_user, selectedTask.date, selectedTask.id_task, selectedTask.status);\n        this.setState({\n          selectedObj: selectedTask,\n          objForm: updObj\n        });\n      }\n\n      if (this.state.clear) {\n        var u = new Utils();\n        updObj = new Task(\"\", 1, u.getDate(), 0, 0);\n        this.setState({\n          clear: false,\n          objForm: updObj\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.setSelectedTask();\n      var fieldGroups = this.createFields();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, fieldGroups, React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.submitForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.clearForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Clear\"));\n    }\n  }]);\n\n  return TaskForm;\n}(React.Component);\nexport default TaskForm;","map":{"version":3,"sources":["/home/gabriel/Documents/Projetos/React/atm-react/src/TaskForm.js"],"names":["React","getFields","Task","Utils","TaskForm","props","state","compName","objForm","clear","clearForm","bind","submitForm","blurField","e","updObj","target","id","description","value","priority","date","setState","fn","console","log","fieldList","map","fields","input","name","type","propName","placeholder","max","min","maxlength","fieldGroup","selectedTask","objSelected","id_task","id_user","status","selectedObj","u","getDate","setSelectedTask","fieldGroups","createFields","Component"],"mappings":"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","sourcesContent":["import './index.css';\nimport React from 'react';\nimport { getFields } from './model/mock.js';\nimport { Task } from './model/task.js';\nimport { Utils } from './model/utils.js';\n\nexport class TaskForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            compName: \"Form\",\n            objForm: new Task(),\n            clear: false\n        }\n        this.clearForm = this.clearForm.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.blurField = this.blurField.bind(this);\n    }\n\n    blurField(e) {\n        var updObj = this.state.objForm;\n        if (e.target.id === \"Description\") {\n            updObj.description = e.target.value;\n        } else if (e.target.id === \"Priority\") {\n            updObj.priority = e.target.value;\n        } else if (e.target.id === \"Due Date\") {\n            updObj.date = e.target.value;\n        }\n        this.setState({\n            objForm: updObj\n        });\n    }\n\n    changeField(fn) {\n        console.log(\"change field\");\n    }\n\n    submitForm() {\n        console.log(\"called here\");\n        this.props.submitForm();\n    }\n\n    clearForm() {\n        this.setState({\n            clear: true\n        });\n        this.props.clearForm();\n    }\n\n    createFields() {\n        var fieldList = getFields();\n        return fieldList.map((fields) => {\n            var input = <input id={fields.name} className=\"form-control\"\n                type={fields.type}\n                onBlur={fn => this.blurField(fn)}\n                defaultValue={this.state.objForm[fields.propName]}\n                placeholder={fields.placeholder}\n                max={fields.max} min={fields.min} maxLength={fields.maxlength}></input>;\n            var fieldGroup = <div key={fields.name} className=\"form-group\">\n                <label>{fields.name}</label>\n                {input}\n            </div>;\n            return (fieldGroup);\n        });\n    }\n\n    setSelectedTask() {\n        var updObj;\n        var selectedTask = this.props.objSelected;\n        if (selectedTask && selectedTask.id_task > 0\n            && selectedTask.id_task !== this.state.objForm.id_task) {\n            console.log(\"update values\")\n            updObj = new Task(selectedTask.description,\n                selectedTask.priority,\n                selectedTask.id_user,\n                selectedTask.date,\n                selectedTask.id_task,\n                selectedTask.status);\n            this.setState({\n                selectedObj: selectedTask,\n                objForm: updObj,\n            });\n        }\n\n        if (this.state.clear) {\n            var u = new Utils();\n            updObj = new Task(\"\", 1, u.getDate(), 0, 0);\n            this.setState({\n                clear: false,\n                objForm: updObj\n            });\n        }\n    }\n\n    render() {\n        this.setSelectedTask();\n        var fieldGroups = this.createFields();\n        return (<div>{fieldGroups}\n            <button className=\"btn btn-primary\" onClick={this.submitForm}>Submit</button>\n            <button className=\"btn btn-primary\" onClick={this.clearForm}>Clear</button>\n        </div>);\n    }\n}\n\nexport default TaskForm;"]},"metadata":{},"sourceType":"module"}
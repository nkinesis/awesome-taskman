{"ast":null,"code":"import _classCallCheck from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/gabriel/Documents/Projetos/React/atm-react/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/gabriel/Documents/Projetos/React/atm-react/src/TaskFrame.js\";\nimport React from 'react';\nimport { getFields } from './model/mock.js';\nimport { Database } from './model/database.js';\nimport { Select } from './model/select.js';\nimport { TaskList } from './TaskList.js';\nimport { TaskForm } from './TaskForm.js';\nimport { Task } from './model/task.js';\nimport './index.css';\nexport var TaskFrame =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TaskFrame, _React$Component);\n\n  function TaskFrame(props) {\n    var _this;\n\n    _classCallCheck(this, TaskFrame);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskFrame).call(this, props));\n    _this.state = {\n      compName: \"Main\",\n      objList: null,\n      objSelected: null\n    };\n    _this.getTasks = _this.getTasks.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TaskFrame, [{\n    key: \"getTasks\",\n    value: function getTasks(callback) {\n      var db = new Database();\n      var ctx = this;\n      var params = new Select(\"status = 0\", 10, \"dueDate desc\");\n      db.select(\"Task\", params).then(function (response) {\n        ctx.setState({\n          objList: [response],\n          objSelected: null\n        });\n\n        if (callback) {\n          callback();\n        }\n      });\n    }\n  }, {\n    key: \"setSelected\",\n    value: function setSelected(e) {\n      var id = e.target.getAttribute(\"idtask\");\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.state.objList[0].data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var task = _step.value;\n\n          if (task.id_task === Number.parseInt(id)) {\n            this.setState({\n              selectedEnt: task\n            });\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"completeTask\",\n    value: function completeTask(e) {\n      var selId = e.target.parentNode.getAttribute(\"idtask\");\n\n      if (selId) {\n        var db = new Database();\n        var ctx = this;\n        var updObj;\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = this.state.taskList.data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var task = _step2.value;\n\n            if (task.id_task === Number.parseInt(selId)) {\n              updObj = task;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        if (updObj) {\n          updObj.status = \"1\";\n          db.update(\"Task\", updObj).then(function (response) {\n            console.log(response);\n            ctx.getTasks();\n          });\n        }\n      }\n    }\n  }, {\n    key: \"removeTask\",\n    value: function removeTask(e) {\n      if (window.confirm('Are you sure you want to delete this task?')) {\n        var selId = e.target.parentNode.getAttribute(\"idtask\");\n\n        if (selId) {\n          var db = new Database();\n          var delObj = new Task(\"\", 1, 1, \"\", selId);\n          var ctx = this;\n          db.delete(\"Task\", delObj).then(function (response) {\n            console.log(response);\n            ctx.getTasks();\n          });\n        }\n      }\n    }\n  }, {\n    key: \"submitForm\",\n    value: function submitForm(fn) {\n      console.log(\"submitForm\");\n    }\n  }, {\n    key: \"changeForm\",\n    value: function changeForm(fn) {\n      console.log(\"changeForm\");\n    }\n  }, {\n    key: \"clearForm\",\n    value: function clearForm(fn) {\n      console.log(\"clearForm\");\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getTasks();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var clsBox = \"mainWrapper\";\n\n      if (this.state.objList) {\n        return React.createElement(\"div\", {\n          className: clsBox,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, React.createElement(TaskForm, {\n          submitForm: function submitForm(fn) {\n            return _this2.submitForm(fn);\n          },\n          clearForm: function clearForm(fn) {\n            return _this2.clearForm(fn);\n          },\n          changeForm: function changeForm(fn) {\n            return _this2.changeForm(fn);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }), React.createElement(TaskList, {\n          objList: this.state.objList[0].data,\n          setSelected: function setSelected(fn) {\n            return _this2.setSelected(fn);\n          },\n          removeTask: function removeTask(fn) {\n            return _this2.removeTask(fn);\n          },\n          completeTask: function completeTask(fn) {\n            return _this2.completeTask(fn);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          className: clsBox,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, React.createElement(TaskForm, {\n          submitForm: function submitForm(fn) {\n            return _this2.submitForm(fn);\n          },\n          clearForm: function clearForm(fn) {\n            return _this2.clearForm(fn);\n          },\n          changeForm: function changeForm(fn) {\n            return _this2.changeForm(fn);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return TaskFrame;\n}(React.Component);\nexport default TaskFrame;","map":{"version":3,"sources":["/home/gabriel/Documents/Projetos/React/atm-react/src/TaskFrame.js"],"names":["React","getFields","Database","Select","TaskList","TaskForm","Task","TaskFrame","props","state","compName","objList","objSelected","getTasks","bind","callback","db","ctx","params","select","then","response","setState","e","id","target","getAttribute","data","task","id_task","Number","parseInt","selectedEnt","selId","parentNode","updObj","taskList","status","update","console","log","window","confirm","delObj","delete","fn","clsBox","submitForm","clearForm","changeForm","setSelected","removeTask","completeTask","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getFields } from './model/mock.js';\nimport { Database } from './model/database.js';\nimport { Select } from './model/select.js';\nimport { TaskList } from './TaskList.js';\nimport { TaskForm } from './TaskForm.js';\nimport { Task } from './model/task.js';\nimport './index.css';\n\nexport class TaskFrame extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            compName: \"Main\",\n            objList: null,\n            objSelected: null,\n        }\n        this.getTasks = this.getTasks.bind(this);\n    }\n\n    getTasks(callback) {\n        var db = new Database();\n        var ctx = this;\n        var params = new Select(\"status = 0\", 10, \"dueDate desc\");\n        db.select(\"Task\", params).then(function (response) {\n            ctx.setState({\n                objList: [response],\n                objSelected: null\n            });\n            if (callback) {\n                callback();\n            }\n        });\n    }\n\n    setSelected(e) {\n        var id = e.target.getAttribute(\"idtask\");\n        for (var task of this.state.objList[0].data) {\n          if (task.id_task === Number.parseInt(id)) {\n            this.setState({ selectedEnt: task });\n            break;\n          }\n        }\n    }\n\n    completeTask(e) {\n        var selId = e.target.parentNode.getAttribute(\"idtask\");\n        if (selId) {\n          var db = new Database();\n          var ctx = this;\n          var updObj;\n          for (var task of this.state.taskList.data) {\n            if (task.id_task === Number.parseInt(selId)) {\n              updObj = task;\n              break;\n            }\n          }\n          if (updObj) {\n            updObj.status = \"1\";\n            db.update(\"Task\", updObj).then(\n              function (response) {\n                console.log(response);\n                ctx.getTasks();\n              }\n            );\n          }\n        }\n    }\n\n    removeTask(e) {\n        if (window.confirm('Are you sure you want to delete this task?')) {\n            var selId = e.target.parentNode.getAttribute(\"idtask\");\n            if (selId) {\n                var db = new Database();\n                var delObj = new Task(\"\", 1, 1, \"\", selId);\n                var ctx = this;\n                db.delete(\"Task\", delObj).then(\n                    function (response) {\n                        console.log(response);\n                        ctx.getTasks();\n                    }\n                );\n            }\n        }\n    }\n\n    submitForm(fn) {\n        console.log(\"submitForm\");\n    }\n\n    changeForm(fn) {\n        console.log(\"changeForm\");\n    }\n\n    clearForm(fn) {\n        console.log(\"clearForm\");\n    }\n\n    componentDidMount() {\n        this.getTasks();\n    }\n\n    render() {\n        var clsBox = \"mainWrapper\";\n        if (this.state.objList) {\n            return <div className={clsBox}>\n                <TaskForm\n                    submitForm={fn => this.submitForm(fn)}\n                    clearForm={fn => this.clearForm(fn)}\n                    changeForm={fn => this.changeForm(fn)}\n                >\n                </TaskForm>\n                <TaskList\n                    objList={this.state.objList[0].data}\n                    setSelected={fn => this.setSelected(fn)}\n                    removeTask={fn => this.removeTask(fn)}\n                    completeTask={fn => this.completeTask(fn)}\n                ></TaskList>\n            </div>\n        } else {\n            return <div className={clsBox}>\n                <TaskForm\n                    submitForm={fn => this.submitForm(fn)}\n                    clearForm={fn => this.clearForm(fn)}\n                    changeForm={fn => this.changeForm(fn)}\n                >\n                </TaskForm>\n            </div>\n        }\n    }\n}\n\nexport default TaskFrame;"]},"metadata":{},"sourceType":"module"}